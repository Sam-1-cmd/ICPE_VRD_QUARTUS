import streamlit as st
import os

# Choisir le mode ici
MODE = "offline"  # "api" pour GPT r√©el, "offline" pour test

st.title("üõ†Ô∏è Analyse ICPE / VRD")

user_input = st.text_area("D√©cris ta modification VRD :", height=200)

if st.button("Analyser"):
    if not user_input:
        st.warning("Merci de remplir le champ.")
    else:
        if MODE == "offline":
            # Simulation de r√©ponse sans GPT
            response = f"""
**Analyse simul√©e :**

Ta modification pourrait impacter les r√©seaux hydrauliques de la zone ICPE.  
V√©rifie la conformit√© avec l'arr√™t√© du 11 avril 2017 (bassins de r√©tention),  
et assure-toi que les eaux de ruissellement sont bien s√©par√©es des eaux incendie.
"""
            st.success("üß™ Mode test (local)")
            st.markdown(response)

        elif MODE == "api":
            from dotenv import load_dotenv
            import openai

            load_dotenv()
            openai.api_key = os.getenv("OPENAI_API_KEY")

            try:
                client = openai.OpenAI()
                response = client.chat.completions.create(
                    model="gpt-3.5-turbo",
                    messages=[
                        {"role": "system", "content": "Tu es un assistant r√©glementaire ICPE/VRD."},
                        {"role": "user", "content": user_input}
                    ]
                )
                st.success("R√©ponse OpenAI (API)")
                st.markdown(response.choices[0].message.content)
            except Exception as e:
                st.error(f"Erreur API : {e}")
